package main

import (
	"BasicCRUD/config"
	_ "BasicCRUD/docs" // docs is generated by Swag CLI
	"BasicCRUD/handlers"
	"BasicCRUD/middleware"
	"fmt"
	"os"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/etag"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/swagger"
	"log"
)

// @title           Car Inventory API
// @version         2.0
// @description     API documentation for the Car Inventory System
// @host            localhost:8080
// @BasePath        /
func main() {
	//TIP <p>Press <shortcut actionId="ShowIntentionActions"/> when your caret is at the underlined text
	// to see how GoLand suggests fixing the warning.</p><p>Alternatively, if available, click the lightbulb to view possible fixes.</p>
	config.ConnectDB()

	app := fiber.New()
	app.Get("/swagger/*", swagger.HandlerDefault)
	app.Use(logger.New())
	app.Use(middleware.Security)
	//app.Use(basicauth.New(basicauth.Config{
	//	Users: map[string]string{
	//		"admin":   "bruhda",
	//		"manager": "Lmao",
	//		"jod":     "Doe",
	//	},
	//	Unauthorized: func(c *fiber.Ctx) error {
	//		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
	//			"error": "User is Unauthorized",
	//		})
	//	},
	//}))
	app.Use(etag.New())

	app.Post("/cars", handlers.CreateCar)
	app.Get("/cars/:id", handlers.GetCar)
	app.Put("/cars/:id", handlers.UpdateCar)
	app.Delete("/cars/:id", handlers.DeleteCar)

	// Get port from environment variable
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	fmt.Printf("HTTP server starting on port %s...\n", port)
	if err := app.Listen(":" + port); err != nil {
		log.Fatalf("Couldn't start HTTP server on port %s, error: %v", port, err)
	}
}
